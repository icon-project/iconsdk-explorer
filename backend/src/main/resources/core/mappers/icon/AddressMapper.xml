<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dfg.icon.core.mappers.icon.AddressMapper">
	
	
	<!-- 모든 주소 List 조회   -->
	<select id="selectAddrList" resultType="com.dfg.icon.web.v0.dto.block.Address">
		
		select 
			address, 
			balance ,
			tx_count as txCount,
			<![CDATA[
			ifnull(node_type , '-') as nodeType
			]]>
		from 
			T_ADDRESS
		order by balance_order desc
		limit #{page, jdbcType=INTEGER} , 20	
		
	</select>
	
	<!-- 모든 주소 List v3 버전 컨트렉트 관련  -->
	
	<select id="selectAddrListV3"
	parameterType="com.dfg.icon.web.v3.dto.PageReq"
	resultType="com.dfg.icon.web.v3.dto.AddressDto">
		
		select 
			address, 
			balance,
			<if test="icxSupply != null">
				REPLACE(FORMAT((balance/${icxSupply})*100, 4), ',', '') as percentage,
			</if>
			<if test="icxUsd != null">
				REPLACE(FORMAT(balance*${icxUsd}, 3), ',', '') as icxUsd,
			</if>
			<if test="icxUsd == null">
				'-' as icxUsd,
			</if>
			tx_count as txCount,
			if(node_type = 'Treasury' or node_type = 'Genesis', node_type, '-') as nodeType
		from 
			T_ADDRESS
		order by balance_order desc, txCount desc, address asc
		limit ${page} , ${counting}
		
	</select>
	
	<select id="selectCountAddrlist" resultType="java.lang.Integer">
		select
			count(*)
		from 
			T_ADDRESS
	
	</select>


	<select id="selectxCountAddrTx" resultType="java.lang.Integer">
		SELECT 
	    	tx_count
		FROM
		    T_ADDRESS_TOTAL
		WHERE
		    address = #{address , jdbcType=VARCHAR}
	
	</select>
	<select id="sumFCAIcx" resultType="com.dfg.icon.core.v3.vo.IcxSupplyVo">
		select
		sum(balance_order) as balance
		from T_ADDRESS_TOTAL
		where node_type = '-'
	</select>
	
	
	<!-- 주소관련 정보 조회  -->
	<select id="selectWalletInfo" resultType="com.dfg.icon.web.v0.dto.WalletInfoDto">
		select 
			address, 
			balance ,
			tx_count as txCount,
			<![CDATA[
			if(node_type = 'Treasury' or node_type = 'Genesis', node_type, '-') as nodeType
			]]>
		from 
			T_ADDRESS_TOTAL
		where
			address = #{address , jdbcType=VARCHAR}
	</select>
	<select id="selectAddressInfo" 
			parameterType="com.dfg.icon.web.v3.dto.PageReq"
			resultType="com.dfg.icon.web.v3.dto.AddressInfo">
		select
		address,
		balance ,
		tx_count as txCount,
		<if test="icxUsd != null">
			REPLACE(FORMAT(balance*${icxUsd}, 3), ',', '') as icxUsd,
		</if>
		<if test="icxUsd == null">
			'-' as icxUsd,
		</if>
		if(node_type = 'Treasury' or node_type = 'Genesis', node_type, '-') as nodeType,
		reported_count as reportedCount,
		report_count as reportCount
		from
		T_ADDRESS_TOTAL
		where
		address = #{address}
	</select>

	<delete id="deleteAddressByBalanceLessThan">
		DELETE FROM T_ADDRESS WHERE balance_order &lt; #{balance, jdbcType=VARCHAR}
	</delete>

	<!--V3용. 주소 토탈의 txCount'만' 적용, height Range-->
	<insert id="upsertTxCountByTransactionRange" parameterType="java.lang.Integer">
		INSERT INTO T_ADDRESS_TOTAL
			(`address`,`tx_count`, `is_update`)
			select
				address, tx_count, true
			from (
			  	select
			  		address, count(*) as tx_count
			  	from T_TRANSACTION_VIEW
			  	where height between #{height1} and #{height2}
			  	group by address
			) a
			  	ON DUPLICATE KEY UPDATE
				T_ADDRESS_TOTAL.tx_count = T_ADDRESS_TOTAL.tx_count + a.tx_count,
				T_ADDRESS_TOTAL.is_update = true
	</insert>

	<!--V3용. 토큰 주소의 txCount'만' 적용, height Range-->
	<insert id="upsertTokenTxCountByTokenTransactionRange" parameterType="java.lang.Integer">
		INSERT INTO T_TOKEN_ADDRESS
			(`address`, `contract_addr`, `tx_count`)
		select
			address, contract_addr, tx_count
		from (
			SELECT
    			address , contract_addr , count(*) tx_count
			FROM T_TOKEN_TX_VIEW
			where
    			block_height between #{height1} and #{height2}
			group by address, contract_addr
		) a
			ON DUPLICATE KEY UPDATE
			T_TOKEN_ADDRESS.tx_count = T_TOKEN_ADDRESS.tx_count + a.tx_count
	</insert>


	<!--공통. 주소 잔액과 txCount를 Address에 적용-->
	<insert id="updateAddressByTotal">
		INSERT INTO T_ADDRESS
		(`address`,`balance`,`tx_count`, `node_type`, `balance_order`)
		select
			address, balance, tx_count, node_type, balance_order
		from (
			select
				address, balance, tx_count, node_type, balance_order
			from T_ADDRESS_TOTAL
			where is_update = true
		) a
		ON DUPLICATE KEY UPDATE
		T_ADDRESS.balance = a.balance,
		T_ADDRESS.balance_order = a.balance_order,
		T_ADDRESS.tx_count = a.tx_count
	</insert>

	<!--업데이트 완료 후 flag 복원-->
	<update id="initUpdateAddressTotal">
		update T_ADDRESS_TOTAL
			set is_update = false
		where is_update = true
	</update>


	<select id="selectSumIcx" resultType="java.lang.String">
		SELECT SUM(balance) FROM T_ADDRESS_TOTAL
	</select>

	<!--V3. 토큰 주소 잔액'만' 적용-->
	<insert id="upsertTokenAddressArray" parameterType="java.util.List">
		INSERT INTO T_TOKEN_ADDRESS (
		address,
		contract_addr,
		tx_count,
		quantity,
		quantity_order
		)
		VALUES
		<foreach collection="list" item="element" index="index" open="(" separator="),(" close=")">
			#{element.address},
			#{element.contractAddr},
			0,
			#{element.quantity},
			convert(#{element.quantity}, decimal(64,18))
		</foreach>
		ON DUPLICATE KEY UPDATE
		T_TOKEN_ADDRESS.quantity = VALUES(quantity),
		T_TOKEN_ADDRESS.quantity_order = VALUES(quantity_order)
	</insert>

	<!--V3용. 주소 잔액'만' 적용-->
	<insert id="upsertAddressArray" parameterType="java.util.List">
		INSERT INTO T_ADDRESS_TOTAL (
		address,
		balance,
		balance_order,
		tx_count,
		node_type,
		is_update
		)
		VALUES
		<foreach collection="list" item="element" index="index" open="(" separator="),(" close=")">
			#{element.address},
			#{element.balance},
			convert(#{element.balance}, decimal(64,18)),
			0,
			#{element.nodeType},
			true
		</foreach>
		ON DUPLICATE KEY UPDATE
		T_ADDRESS_TOTAL.balance = VALUES(balance),
		T_ADDRESS_TOTAL.balance_order = convert(VALUES(balance), decimal(64,18)),
		T_ADDRESS_TOTAL.is_update = true
	</insert>

	<!-- prep 임기 업데이트 -->
	<insert id="upsertPrepTerm" parameterType="java.util.List">
		INSERT INTO T_ADDRESS_PREP (
			address,
			rep_name,
			block_count,
			is_prep,
			start_term,
			end_term,
			url,
			rep_hash,
			update_date
		)
		VALUES
		<foreach collection="list" item="element" index="index" open="(" separator="),(" close=")">
			#{element.address},
			#{element.repPame},
			0,
			#{element.isPrep},
			#{element.startTerm},
			#{element.endTerm},
			#{element.url},
			#{element.repHash},
			#{element.updateDate}
		</foreach>
		ON DUPLICATE KEY UPDATE
		T_ADDRESS_PREP.is_prep = IF(ISNULL(VALUES(is_prep)), is_prep, VALUES(is_prep)),
		T_ADDRESS_PREP.start_term = IF(ISNULL(VALUES(start_term)), start_term, VALUES(start_term)),
		T_ADDRESS_PREP.end_term = IF(ISNULL(VALUES(end_term)), end_term, VALUES(end_term)),
		T_ADDRESS_PREP.rep_hash = if(VALUES(rep_hash) is null, T_ADDRESS_PREP.rep_hash, VALUES(rep_hash))
		T_ADDRESS_PREP.update_date = IF(ISNULL(VALUES(update_date)), update_date, VALUES(update_date))
	</insert>

	<select id="selectBalanceAddressCount" resultType="java.lang.Integer">
		SELECT
			count(*)
		FROM T_ADDRESS_TOTAL where balance_order &gt;= cast(0.001 as decimal(64,18))
	</select>
	
	<update id="updateReportCountAdd" parameterType="java.lang.String">
		UPDATE T_ADDRESS_TOTAL
		SET report_count = report_count + 1
		WHERE address = #{address}
	</update>
	<update id="updateReportedCountAdd" parameterType="java.lang.String">
		UPDATE T_ADDRESS_TOTAL
		SET reported_count = reported_count + 1
		WHERE address = #{address}
	</update>

	<select id="selectWhiteAddressList"
			resultType="java.lang.String">
		SELECT address FROM T_ADDRESS_TOTAL where node_type='-'
	</select>
</mapper>